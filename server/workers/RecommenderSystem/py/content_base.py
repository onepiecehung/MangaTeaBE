# -*- coding: utf-8 -*-
"""Content-base.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HsP6KUbzZ7uW4hvkEguI40YtC7VgGrPq
"""

import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

ds = pd.read_csv("./sample-data.csv")

tf = TfidfVectorizer(analyzer='word', ngram_range=(1, 3), min_df=0, stop_words='english')
tfidf_matrix = tf.fit_transform(ds['description'])

cosine_similarities = linear_kernel(tfidf_matrix, tfidf_matrix) 

results = {}

for idx, row in ds.iterrows():
   similar_indices = cosine_similarities[idx].argsort()[:-100:-1] 
   similar_items = [(cosine_similarities[idx][i], ds['id'][i]) for i in similar_indices] 
   results[row['id']] = similar_items[1:]

    
print('done!')
# print(results)

def item(id):
    return ds.loc[ds['id'] == id]['description'].tolist()[0].split(' - ')[0]

def item2(id):
    return ds.loc[str(ds['id']) , ds['description']]

def recommend(item_id, num):
    print("Recommending " + str(num) + " products similar to " + item(item_id) + "...")
    print("-------")
    recs = results[item_id][:num]
    array=[]
    for rec in recs:
        print("Recommended: "  + item(rec[1]) + " (score:" + str(rec[1]) + ")")
    for rec in recs:
        array.append(rec[1])
    print(array)

recommend(item_id=1, num=10)